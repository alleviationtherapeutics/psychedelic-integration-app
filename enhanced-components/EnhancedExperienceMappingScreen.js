import React, { useState, useEffect, useRef } from 'react';\nimport { \n  ScrollView, \n  View, \n  Text, \n  TextInput, \n  TouchableOpacity, \n  Alert,\n  Animated,\n  ActivityIndicator\n} from 'react-native';\nimport { supabase } from '../lib/supabase';\nimport ExperienceMappingService from '../enhanced-components/experienceMappingService';\nimport CrossSessionDataManager from '../enhanced-components/CrossSessionDataManager';\n\nconst EnhancedExperienceMappingScreen = ({ navigation, route }) => {\n  console.log('EnhancedExperienceMappingScreen route params:', route.params);\n  \n  const session = route?.params?.session || null;\n  \n  if (!session || !session.id) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text style={styles.errorTitle}>Session Error</Text>\n        <Text style={styles.errorText}>\n          No session data available. Please go back and start a new experience processing session.\n        </Text>\n        <TouchableOpacity \n          style={styles.backButton}\n          onPress={() => navigation.goBack()}\n        >\n          <Text style={styles.backButtonText}>Go Back</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n  \n  // Core conversation state\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [entities, setEntities] = useState([]);\n  \n  // Experience processing state\n  const [experienceData, setExperienceData] = useState({\n    associations: [],\n    dynamics: [],\n    integrations: [],\n    rituals: [],\n    currentPhase: 1\n  });\n  \n  // Cross-session awareness\n  const [hasTherapeuticContext, setHasTherapeuticContext] = useState(false);\n  const [therapeuticSummary, setTherapeuticSummary] = useState(null);\n  \n  // Refs\n  const scrollViewRef = useRef(null);\n  \n  // Services\n  const experienceMapper = useRef(new ExperienceMappingService()).current;\n  const dataManager = useRef(new CrossSessionDataManager()).current;\n\n  // Initialize conversation\n  useEffect(() => {\n    initializeConversation();\n  }, []);\n\n  const initializeConversation = async () => {\n    try {\n      // Load full session data with cross-references\n      await loadSessionData();\n      \n      if (messages.length === 0) {\n        setTimeout(() => {\n          initiateExperienceMapping();\n        }, 1000);\n      }\n    } catch (error) {\n      console.error('Error initializing conversation:', error);\n    }\n  };\n\n  const loadSessionData = async () => {\n    try {\n      // Use CrossSessionDataManager to load all session data\n      if (session.session_data) {\n        // Temporary session - set data directly\n        dataManager.setSessionData(session.session_data);\n      } else {\n        // Database session - load from supabase\n        await dataManager.loadFullSessionData(session.id, supabase);\n      }\n      \n      // Get experience mapping specific data\n      const experienceContextData = dataManager.getExperienceContextWithTherapeuticData();\n      \n      setMessages(experienceContextData.messages);\n      setEntities(experienceContextData.entities);\n      setExperienceData(experienceContextData.experienceData);\n      \n      // Set therapeutic context awareness\n      setHasTherapeuticContext(experienceContextData.hasTherapeuticHistory);\n      if (experienceContextData.hasTherapeuticHistory) {\n        setTherapeuticSummary({\n          nervousSystemState: experienceContextData.therapeuticInsights.nervousSystemPatterns,\n          practicesCompleted: experienceContextData.therapeuticInsights.completedPractices.length,\n          themes: experienceContextData.therapeuticInsights.identifiedThemes\n        });\n      }\n      \n      // Initialize experience mapper with FULL cross-session context\n      const fullContext = {\n        sessionId: session.id,\n        messages: experienceContextData.messages,\n        entities: experienceContextData.entities,\n        experienceData: experienceContextData.experienceData,\n        // Cross-session therapeutic context\n        therapeuticMessages: experienceContextData.therapeuticInsights?.messages || [],\n        therapeuticEntities: experienceContextData.therapeuticInsights?.therapeuticEntities || [],\n        nervousSystemState: experienceContextData.therapeuticInsights?.nervousSystemPatterns || 'unknown',\n        practicesCompleted: experienceContextData.therapeuticInsights?.completedPractices || [],\n        interventionsFocused: experienceContextData.therapeuticInsights?.identifiedThemes || []\n      };\n      \n      experienceMapper.initializeSession(fullContext);\n      \n      console.log('✅ Enhanced Experience Mapping initialized with cross-session data:', {\n        experienceMessages: experienceContextData.messages.length,\n        hasTherapeuticContext: experienceContextData.hasTherapeuticHistory,\n        currentPhase: experienceContextData.experienceData.currentPhase\n      });\n      \n    } catch (error) {\n      console.error('Error loading session data:', error);\n    }\n  };\n\n  const saveMessages = async (newMessages, additionalData = {}) => {\n    try {\n      // Use CrossSessionDataManager to save without overwriting other mode's data\n      await dataManager.saveExperienceMappingData(\n        newMessages,\n        entities,\n        experienceData,\n        additionalData,\n        supabase\n      );\n      \n      console.log('✅ Experience mapping data saved with cross-session preservation');\n      \n    } catch (error) {\n      console.error('Error saving messages:', error);\n    }\n  };\n\n  const initiateExperienceMapping = () => {\n    let welcomeContent = `Welcome to **Experience Processing**! \n\nI'm here to help you systematically explore and document your psychedelic experience. This will give you comprehensive material for reflection and integration.\n\nWe'll work through:\n📝 **Gathering Details** - Collecting all the elements (symbols, sensations, emotions)\n🔗 **Exploring Connections** - Mapping relationships and patterns\n💡 **Finding Meaning** - Discovering insights and connections to your life\n🎯 **Creating Practices** - Developing ways to integrate your discoveries`;\n    \n    // Add therapeutic context awareness if available\n    if (hasTherapeuticContext && therapeuticSummary) {\n      welcomeContent += `\n\n💡 **Cross-Session Insight**: I can see you've been doing therapeutic integration work (${therapeuticSummary.nervousSystemState} nervous system state, ${therapeuticSummary.practicesCompleted} practices completed). I'll reference that work when relevant to your experience processing.`;\n    }\n    \n    welcomeContent += `\n\nLet's begin by **gathering all the details** from your experience. \n\nTell me about your recent psychedelic experience - what stands out most vividly? Take your time and share whatever feels important to capture.`;\n\n    const welcomeMessage = {\n      role: 'assistant',\n      content: welcomeContent,\n      timestamp: new Date(),\n      currentPhase: 1,\n      messageType: 'experience_mapping_intro',\n      crossSessionAware: hasTherapeuticContext\n    };\n\n    setMessages([welcomeMessage]);\n  };\n\n  const handleSendMessage = async () => {\n    if (!userInput.trim() || isLoading) return;\n\n    const userMessage = {\n      role: 'user',\n      content: userInput.trim(),\n      timestamp: new Date(),\n      currentPhase: experienceData.currentPhase\n    };\n\n    const newMessages = [...messages, userMessage];\n    setMessages(newMessages);\n    setUserInput('');\n    setIsLoading(true);\n\n    try {\n      // Get experience mapping response with full cross-session context\n      const response = await experienceMapper.continueExperienceMapping(\n        userInput.trim(),\n        {\n          messages: newMessages,\n          entities: entities,\n          experienceData: experienceData\n        }\n      );\n\n      const assistantMessage = {\n        role: 'assistant',\n        content: response.message,\n        timestamp: new Date(),\n        entities: response.extractedEntities || [],\n        currentPhase: response.currentPhase,\n        experienceUpdate: response.experienceUpdate\n      };\n\n      const updatedMessages = [...newMessages, assistantMessage];\n      setMessages(updatedMessages);\n\n      // Update entities if new ones were extracted\n      if (response.extractedEntities && response.extractedEntities.length > 0) {\n        const updatedEntities = [...entities, ...response.extractedEntities];\n        setEntities(updatedEntities);\n      }\n\n      // Update experience data if new information was gathered\n      if (response.experienceUpdate) {\n        setExperienceData(prev => ({\n          ...prev,\n          ...response.experienceUpdate\n        }));\n      }\n\n      await saveMessages(updatedMessages);\n\n    } catch (error) {\n      console.error('Error sending message:', error);\n      \n      // Enhanced error handling with network diagnostics\n      let errorContent = \"I'm here with you. Take a moment to breathe.\";\n      let showNetworkTest = false;\n      \n      if (error.message && error.message.includes('Network request failed')) {\n        errorContent = `I'm experiencing connectivity issues right now. This appears to be a network problem rather than anything you've done.\n\nWould you like me to run a network diagnostic to help identify the issue?`;\n        showNetworkTest = true;\n      } else if (error.message && error.message.includes('API request failed')) {\n        errorContent = `I'm having trouble connecting to my AI service right now. This is a temporary technical issue.\n\nYou can continue documenting your experience, and I'll be back online soon.`;\n        showNetworkTest = true;\n      }\n      \n      const errorMessage = {\n        role: 'assistant',\n        content: errorContent,\n        timestamp: new Date(),\n        isError: true,\n        showNetworkTest: showNetworkTest\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderProcessingProgress = () => {\n    const phases = [\n      { number: 1, name: 'Gathering', complete: experienceData.associations.length > 0 },\n      { number: 2, name: 'Connecting', complete: experienceData.dynamics.length > 0 },\n      { number: 3, name: 'Meaning', complete: experienceData.integrations.length > 0 },\n      { number: 4, name: 'Practices', complete: experienceData.rituals.length > 0 }\n    ];\n\n    return (\n      <View style={styles.progressContainer}>\n        <View style={styles.progressHeader}>\n          <Text style={styles.progressTitle}>Experience Processing:</Text>\n          {hasTherapeuticContext && (\n            <Text style={styles.crossSessionIndicator}>\n              🔄 Connected to therapeutic work\n            </Text>\n          )}\n        </View>\n        <View style={styles.phaseIndicators}>\n          {phases.map((phase) => (\n            <View key={phase.number} style={styles.phaseIndicator}>\n              <View style={[\n                styles.phaseCircle,\n                phase.complete && styles.phaseCircleComplete,\n                experienceData.currentPhase === phase.number && styles.phaseCircleCurrent\n              ]}>\n                <Text style={[\n                  styles.phaseNumber,\n                  phase.complete && styles.phaseNumberComplete\n                ]}>\n                  {phase.number}\n                </Text>\n              </View>\n              <Text style={styles.phaseName}>{phase.name}</Text>\n            </View>\n          ))}\n        </View>\n        \n        {/* Phase Summary */}\n        <View style={styles.phaseSummary}>\n          <Text style={styles.phaseSummaryText}>\n            Current: Phase {experienceData.currentPhase} - {\n              experienceData.currentPhase === 1 ? 'Gathering symbols, emotions, and sensations' :\n              experienceData.currentPhase === 2 ? 'Exploring relationships and patterns' :\n              experienceData.currentPhase === 3 ? 'Finding meaning and life connections' :\n              'Creating integration practices'\n            }\n          </Text>\n        </View>\n      </View>\n    );\n  };\n\n  const renderTherapeuticAwareness = () => {\n    if (!hasTherapeuticContext || !therapeuticSummary) return null;\n    \n    return (\n      <View style={styles.therapeuticAwarenessContainer}>\n        <Text style={styles.therapeuticAwarenessTitle}>Therapeutic Context:</Text>\n        <Text style={styles.therapeuticAwarenessText}>\n          {therapeuticSummary.nervousSystemState} state • {therapeuticSummary.practicesCompleted} practices • \n          {therapeuticSummary.themes.slice(-2).join(', ') || 'Exploring themes'}\n        </Text>\n      </View>\n    );\n  };\n\n  const renderMessages = () => {\n    return messages.map((message, index) => (\n      <View\n        key={index}\n        style={[\n          styles.messageBubble,\n          message.role === 'user' ? styles.userBubble : styles.assistantBubble\n        ]}\n      >\n        <Text style={[\n          styles.messageText,\n          message.role === 'user' ? styles.userText : styles.assistantText\n        ]}>\n          {message.content}\n        </Text>\n        \n        {/* Show cross-session awareness indicator */}\n        {message.crossSessionAware && (\n          <View style={styles.crossSessionIndicatorMessage}>\n            <Text style={styles.crossSessionIndicatorText}>\n              🔄 Aware of therapeutic integration work\n            </Text>\n          </View>\n        )}\n        \n        {/* Show current phase indicator */}\n        {message.currentPhase && (\n          <View style={styles.phaseStepIndicator}>\n            <Text style={styles.phaseStepText}>\n              Phase {message.currentPhase}: {\n                message.currentPhase === 1 ? 'Gathering Details' :\n                message.currentPhase === 2 ? 'Exploring Connections' :\n                message.currentPhase === 3 ? 'Finding Meaning' :\n                'Creating Practices'\n              }\n            </Text>\n          </View>\n        )}\n        \n        {/* Show extracted entities */}\n        {message.entities && message.entities.length > 0 && (\n          <View style={styles.entitiesContainer}>\n            {message.entities.map((entity, entityIndex) => (\n              <View key={entityIndex} style={styles.entityChip}>\n                <Text style={styles.entityText}>{entity.name}</Text>\n              </View>\n            ))}\n          </View>\n        )}\n        \n        {/* Show network test button for connectivity errors */}\n        {message.showNetworkTest && (\n          <TouchableOpacity\n            style={styles.networkTestButton}\n            onPress={() => navigation.navigate('NetworkTest')}\n          >\n            <Text style={styles.networkTestButtonText}>🔍 Run Network Test</Text>\n          </TouchableOpacity>\n        )}\n      </View>\n    ));\n  };\n\n  const renderInput = () => {\n    return (\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.textInput}\n          value={userInput}\n          onChangeText={setUserInput}\n          placeholder={\n            experienceData.currentPhase === 1 ? \"Describe what you experienced (colors, sounds, feelings, thoughts...)\" :\n            experienceData.currentPhase === 2 ? \"How did different elements relate to each other?\" :\n            experienceData.currentPhase === 3 ? \"What meaning do these experiences hold for your life?\" :\n            \"What practices would help you integrate these insights?\"\n          }\n          multiline\n          maxLength={1500}\n          editable={!isLoading}\n        />\n        <TouchableOpacity\n          style={[\n            styles.sendButton,\n            (!userInput.trim() || isLoading) && styles.sendButtonDisabled\n          ]}\n          onPress={handleSendMessage}\n          disabled={!userInput.trim() || isLoading}\n        >\n          {isLoading ? (\n            <ActivityIndicator size=\"small\" color=\"#ffffff\" />\n          ) : (\n            <Text style={styles.sendButtonText}>→</Text>\n          )}\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      {/* Header */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => navigation.goBack()}>\n          <Text style={styles.backText}>← Back</Text>\n        </TouchableOpacity>\n        <Text style={styles.title}>Experience Processing</Text>\n        <TouchableOpacity onPress={() => navigation.navigate('TherapeuticIntegration', { session })}>\n          <Text style={styles.switchText}>Switch to Integration →</Text>\n        </TouchableOpacity>\n      </View>\n      \n      {/* Progress Indicator */}\n      {renderProcessingProgress()}\n      \n      {/* Therapeutic Awareness */}\n      {renderTherapeuticAwareness()}\n      \n      <ScrollView\n        ref={scrollViewRef}\n        style={styles.messagesContainer}\n        contentContainerStyle={styles.messagesContent}\n        onContentSizeChange={() => \n          scrollViewRef.current?.scrollToEnd({ animated: true })\n        }\n      >\n        {renderMessages()}\n        \n        {isLoading && (\n          <View style={styles.typingIndicator}>\n            <Text style={styles.typingText}>Processing your experience...</Text>\n            <ActivityIndicator size=\"small\" color=\"#3b82f6\" />\n          </View>\n        )}\n      </ScrollView>\n\n      {renderInput()}\n    </View>\n  );\n};\n\nconst styles = {\n  container: {\n    flex: 1,\n    backgroundColor: '#f9fafb',\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 32,\n    backgroundColor: '#f5f5f5',\n  },\n  errorTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#d32f2f',\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n    marginBottom: 32,\n    lineHeight: 24,\n  },\n  backButton: {\n    backgroundColor: '#2196f3',\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  backButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 16,\n    backgroundColor: '#ffffff',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e5e7eb',\n  },\n  backText: {\n    fontSize: 16,\n    color: '#3b82f6',\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1f2937',\n  },\n  switchText: {\n    fontSize: 12,\n    color: '#10b981',\n  },\n  progressContainer: {\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e5e7eb',\n  },\n  progressHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  progressTitle: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#374151',\n  },\n  crossSessionIndicator: {\n    fontSize: 10,\n    color: '#10b981',\n    fontWeight: '500',\n  },\n  phaseIndicators: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 8,\n  },\n  phaseIndicator: {\n    alignItems: 'center',\n    flex: 1,\n  },\n  phaseCircle: {\n    width: 28,\n    height: 28,\n    borderRadius: 14,\n    backgroundColor: '#f3f4f6',\n    borderWidth: 2,\n    borderColor: '#d1d5db',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  phaseCircleComplete: {\n    backgroundColor: '#10b981',\n    borderColor: '#10b981',\n  },\n  phaseCircleCurrent: {\n    backgroundColor: '#3b82f6',\n    borderColor: '#3b82f6',\n  },\n  phaseNumber: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    color: '#6b7280',\n  },\n  phaseNumberComplete: {\n    color: '#ffffff',\n  },\n  phaseName: {\n    fontSize: 10,\n    color: '#6b7280',\n    textAlign: 'center',\n  },\n  phaseSummary: {\n    backgroundColor: '#f8fafc',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 6,\n  },\n  phaseSummaryText: {\n    fontSize: 11,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  therapeuticAwarenessContainer: {\n    backgroundColor: '#f0fdf4',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e5e7eb',\n  },\n  therapeuticAwarenessTitle: {\n    fontSize: 11,\n    fontWeight: '600',\n    color: '#166534',\n    marginBottom: 2,\n  },\n  therapeuticAwarenessText: {\n    fontSize: 10,\n    color: '#15803d',\n  },\n  messagesContainer: {\n    flex: 1,\n  },\n  messagesContent: {\n    padding: 16,\n    paddingBottom: 24,\n  },\n  messageBubble: {\n    marginVertical: 4,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 16,\n    maxWidth: '85%',\n  },\n  userBubble: {\n    backgroundColor: '#3b82f6',\n    alignSelf: 'flex-end',\n  },\n  assistantBubble: {\n    backgroundColor: '#ffffff',\n    alignSelf: 'flex-start',\n    borderWidth: 1,\n    borderColor: '#e5e7eb',\n  },\n  messageText: {\n    fontSize: 16,\n    lineHeight: 22,\n  },\n  userText: {\n    color: '#ffffff',\n  },\n  assistantText: {\n    color: '#1f2937',\n  },\n  crossSessionIndicatorMessage: {\n    marginTop: 6,\n    paddingHorizontal: 8,\n    paddingVertical: 3,\n    backgroundColor: 'rgba(16, 185, 129, 0.1)',\n    borderRadius: 6,\n  },\n  crossSessionIndicatorText: {\n    fontSize: 10,\n    color: '#10b981',\n    fontWeight: '500',\n  },\n  phaseStepIndicator: {\n    marginTop: 8,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    backgroundColor: 'rgba(16, 185, 129, 0.1)',\n    borderRadius: 8,\n  },\n  phaseStepText: {\n    fontSize: 11,\n    color: '#10b981',\n    fontWeight: '600',\n  },\n  entitiesContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 6,\n    marginTop: 8,\n  },\n  entityChip: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    backgroundColor: '#e0f2fe',\n    borderRadius: 12,\n  },\n  entityText: {\n    fontSize: 12,\n    color: '#0891b2',\n    fontWeight: '500',\n  },\n  typingIndicator: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    backgroundColor: '#f3f4f6',\n    borderRadius: 16,\n    alignSelf: 'flex-start',\n    marginTop: 8,\n  },\n  typingText: {\n    fontSize: 14,\n    color: '#6b7280',\n    fontStyle: 'italic',\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    padding: 16,\n    backgroundColor: '#ffffff',\n    borderTopWidth: 1,\n    borderTopColor: '#e5e7eb',\n    alignItems: 'flex-end',\n    gap: 12,\n  },\n  textInput: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: '#d1d5db',\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    fontSize: 16,\n    maxHeight: 120,\n    backgroundColor: '#ffffff',\n  },\n  sendButton: {\n    width: 44,\n    height: 44,\n    borderRadius: 22,\n    backgroundColor: '#3b82f6',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  sendButtonDisabled: {\n    backgroundColor: '#9ca3af',\n  },\n  sendButtonText: {\n    fontSize: 20,\n    color: '#ffffff',\n    fontWeight: 'bold',\n  },\n  networkTestButton: {\n    marginTop: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    backgroundColor: '#3b82f6',\n    borderRadius: 8,\n    alignSelf: 'flex-start',\n  },\n  networkTestButtonText: {\n    fontSize: 12,\n    color: '#ffffff',\n    fontWeight: '500',\n  },\n};\n\nexport default EnhancedExperienceMappingScreen;\n"
