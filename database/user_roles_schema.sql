-- User Roles and Access Control Schema\n-- Add this to your existing Supabase database\n\n-- Create user_roles table\nCREATE TABLE user_roles (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id) UNIQUE,\n  role TEXT NOT NULL CHECK (role IN ('user', 'therapist', 'admin')),\n  verified BOOLEAN DEFAULT FALSE,\n  license_number TEXT,\n  license_type TEXT, -- 'LMFT', 'LCSW', 'PhD', 'MD', etc.\n  license_state TEXT,\n  verification_document_url TEXT,\n  verified_by UUID REFERENCES auth.users(id),\n  verified_at TIMESTAMPTZ,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Create indexes\nCREATE INDEX idx_user_roles_user_id ON user_roles(user_id);\nCREATE INDEX idx_user_roles_role ON user_roles(role);\nCREATE INDEX idx_user_roles_verified ON user_roles(verified);\n\n-- Enable RLS\nALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies for user_roles\n-- Users can read their own role\nCREATE POLICY \"Users can read own role\" ON user_roles\n  FOR SELECT USING (auth.uid() = user_id);\n\n-- Users can request therapist verification (insert only)\nCREATE POLICY \"Users can request verification\" ON user_roles\n  FOR INSERT WITH CHECK (auth.uid() = user_id);\n\n-- Only admins can update verification status\nCREATE POLICY \"Admins can verify roles\" ON user_roles\n  FOR UPDATE USING (\n    EXISTS (\n      SELECT 1 FROM user_roles \n      WHERE user_id = auth.uid() \n      AND role = 'admin' \n      AND verified = TRUE\n    )\n  );\n\n-- Update training_scenarios RLS to require therapist role\nDROP POLICY IF EXISTS \"Allow authenticated users to insert scenarios\" ON training_scenarios;\n\nCREATE POLICY \"Allow verified therapists to insert scenarios\" ON training_scenarios\n  FOR INSERT WITH CHECK (\n    EXISTS (\n      SELECT 1 FROM user_roles \n      WHERE user_id = auth.uid() \n      AND role IN ('therapist', 'admin')\n      AND verified = TRUE\n    )\n  );\n\n-- Allow verified therapists to update scenarios\nDROP POLICY IF EXISTS \"Allow users to update own scenarios\" ON training_scenarios;\n\nCREATE POLICY \"Allow verified therapists to update scenarios\" ON training_scenarios\n  FOR UPDATE USING (\n    auth.uid() = created_by AND\n    EXISTS (\n      SELECT 1 FROM user_roles \n      WHERE user_id = auth.uid() \n      AND role IN ('therapist', 'admin')\n      AND verified = TRUE\n    )\n  );\n\n-- Create therapist verification requests table\nCREATE TABLE therapist_verification_requests (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID REFERENCES auth.users(id),\n  email TEXT,\n  full_name TEXT,\n  license_type TEXT,\n  license_number TEXT,\n  license_state TEXT,\n  license_expiry DATE,\n  practice_name TEXT,\n  practice_address TEXT,\n  years_experience INTEGER,\n  specializations TEXT[],\n  document_urls TEXT[],\n  additional_info TEXT,\n  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected', 'needs_more_info')),\n  reviewed_by UUID REFERENCES auth.users(id),\n  reviewed_at TIMESTAMPTZ,\n  review_notes TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Enable RLS on verification requests\nALTER TABLE therapist_verification_requests ENABLE ROW LEVEL SECURITY;\n\n-- RLS Policies for verification requests\nCREATE POLICY \"Users can create own verification request\" ON therapist_verification_requests\n  FOR INSERT WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can read own verification request\" ON therapist_verification_requests\n  FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Admins can manage all verification requests\" ON therapist_verification_requests\n  FOR ALL USING (\n    EXISTS (\n      SELECT 1 FROM user_roles \n      WHERE user_id = auth.uid() \n      AND role = 'admin'\n      AND verified = TRUE\n    )\n  );\n\n-- Function to check user role\nCREATE OR REPLACE FUNCTION get_user_role(user_uuid UUID)\nRETURNS TABLE(role TEXT, verified BOOLEAN) AS $$\nBEGIN\n  RETURN QUERY\n  SELECT ur.role, ur.verified\n  FROM user_roles ur\n  WHERE ur.user_id = user_uuid;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Insert default admin user (replace with your actual admin email)\n-- You'll need to update this with your actual admin user ID\n-- INSERT INTO user_roles (user_id, role, verified) \n-- VALUES ('[your-admin-user-id]', 'admin', TRUE);\n\n-- Example: Set user role to regular user by default\n-- This would typically be handled in your app registration flow\nCREATE OR REPLACE FUNCTION handle_new_user() \nRETURNS TRIGGER AS $$\nBEGIN\n  INSERT INTO user_roles (user_id, role, verified)\n  VALUES (NEW.id, 'user', TRUE);\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Create trigger for new user registration\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE FUNCTION handle_new_user();